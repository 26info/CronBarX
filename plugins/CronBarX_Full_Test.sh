#!/bin/bash

# =============================================================================
# CronBarX Full Functionality Test / –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CronBarX
# =============================================================================
# 
# ENGLISH:
# Comprehensive test of ALL CronBarX functionality including:
# - Basic script execution
# - Menu structure with all formats  
# - Command execution with various types
# - Paths with spaces handling
# - Plugin simulation
# - Error handling
# - Refresh functionality
# - Submenus and nested structure
# 
# –†–£–°–°–ö–ò–ô:
# –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –í–°–ï–ô —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CronBarX –≤–∫–ª—é—á–∞—è:
# - –ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
# - –°—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
# - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
# - –û–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
# - –°–∏–º—É–ª—è—Ü–∏—é –ø–ª–∞–≥–∏–Ω–æ–≤
# - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
# - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# - –ü–æ–¥–º–µ–Ω—é –∏ –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
#
# USAGE / –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
# Save as .sh file and run from CronBarX / –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ .sh –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ CronBarX
# =============================================================================

# Test counter / –°—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
TESTS_PASSED=0
TESTS_FAILED=0

# Function to print test header / –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞
print_header() {
    echo "=== $1 ==="
}

# Function to print test result / –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
print_result() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ PASS: $2"
        ((TESTS_PASSED++))
    else
        echo "‚ùå FAIL: $2"
        ((TESTS_FAILED++))
    fi
}

# Function to test basic functionality / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
test_basic_functionality() {
    print_header "BASIC FUNCTIONALITY TEST / –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò"
    
    # Test 1: Script execution / –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    echo "üîÑ Testing script execution..."
    if [ -f "$0" ]; then
        print_result 0 "Script file exists and executable"
    else
        print_result 1 "Script file not found"
    fi
    
    # Test 2: Output format / –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
    echo "üìù Testing output format..."
    output=$(echo "Test Title" | head -1)
    if [ ! -z "$output" ]; then
        print_result 0 "Title output format is correct"
    else
        print_result 1 "Title output format is empty"
    fi
    
    # Test 3: Multiple line output / –¢–µ—Å—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    echo "üìÑ Testing multi-line output..."
    multi_line_output=$(echo -e "Line 1\nLine 2\nLine 3" | wc -l)
    if [ $multi_line_output -eq 3 ]; then
        print_result 0 "Multi-line output works"
    else
        print_result 1 "Multi-line output failed"
    fi
}

# Function to test complete menu structure / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é
test_complete_menu_structure() {
    print_header "COMPLETE MENU STRUCTURE TEST / –¢–ï–°–¢ –ü–û–õ–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –ú–ï–ù–Æ"
    
    # Test all menu item formats / –¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    echo "üìã Testing complete menu structure..."
    
    # Main title / –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    echo "üîÑ CronBarX Full Test v1.0"
    
    # Separator / –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    echo "---"
    print_result 0 "Menu separator displayed"
    
    # Simple menu items / –ü—Ä–æ—Å—Ç—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
    echo "Simple menu item without action"
    print_result 0 "Simple menu item displayed"
    
    # Menu items with pipe format / –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å —Ñ–æ—Ä–º–∞—Ç–æ–º pipe
    echo "Menu with pipe | param1=value1"
    print_result 0 "Menu item with pipe format displayed"
    
    # Menu items with shell commands / –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å shell –∫–æ–º–∞–Ω–¥–∞–º–∏
    echo "Echo command | shell=\"echo Hello World\""
    echo "Date command | shell=\"date\""
    echo "List files | shell=\"ls -la\""
    print_result 0 "Menu items with shell commands displayed"
    
    # Menu items with refresh / –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    echo "Refresh this menu | refresh=true"
    echo "Refresh with command | shell=\"echo test\" refresh=true"
    print_result 0 "Menu items with refresh displayed"
    
    # Menu items with parameters / –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    echo "Command with params | shell=\"echo\" param1=\"Hello\" param2=\"World\""
    echo "Multiple params | shell=\"printf\" param1=\"%s\" param2=\"test\""
    print_result 0 "Menu items with parameters displayed"
    
    # Menu items with href / –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    echo "Open GitHub | href=https://github.com"
    echo "Open System Preferences | href=x-apple.systempreferences:"
    echo "Open Home Directory | href=~/"
    print_result 0 "Menu items with href displayed"
    
    # Complex submenu structure / –°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é
    echo "Main Menu Level 1"
    echo "--Submenu Level 2"
    echo "--Another Submenu Level 2"
    echo "----Deep Submenu Level 3"
    echo "------Deeper Submenu Level 4"
    echo "----Back to Level 3"
    echo "--Back to Level 2"
    echo "Back to Level 1"
    print_result 0 "Complex submenu structure displayed"
    
    # Mixed content in submenus / –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø–æ–¥–º–µ–Ω—é
    echo "System Tools"
    echo "--Disk Usage | shell=\"df -h\""
    echo "--Memory Info | shell=\"vm_stat\""
    echo "--Network Info"
    echo "----IP Address | shell=\"ifconfig | grep 'inet '\""
    echo "----Open Network Prefs | href=x-apple.systempreferences:com.apple.Network-Settings.extension"
    echo "--Process List | shell=\"ps aux | head -10\""
    print_result 0 "Mixed content submenus displayed"
    
    # Separators in submenus / –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –ø–æ–¥–º–µ–Ω—é
    echo "Applications"
    echo "--Productivity"
    echo "---Open Notes | shell=open -a Notes"
    echo "---Open Calendar | shell=open -a Calendar"
    echo "--"
    echo "--Development"
    echo "---Open Terminal | shell=open -a Terminal"
    echo "---Open Xcode | shell=open -a Xcode"
    print_result 0 "Separators in submenus displayed"
}

# Function to test command execution types / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
test_command_execution_types() {
    print_header "COMMAND EXECUTION TYPES TEST / –¢–ï–°–¢ –¢–ò–ü–û–í –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î"
    
    # Test simple commands / –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
    echo "Testing command execution types..."
    
    # Test echo commands / –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ echo
    echo "üîÑ Testing echo commands..."
    result=$(echo "test" 2>/dev/null)
    if [ "$result" = "test" ]; then
        print_result 0 "Simple echo command works"
    else
        print_result 1 "Simple echo command failed"
    fi
    
    # Test system commands / –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    echo "üñ•Ô∏è Testing system commands..."
    if command -v uname &> /dev/null; then
        system_info=$(uname -s 2>/dev/null)
        if [ ! -z "$system_info" ]; then
            print_result 0 "System command (uname) works: $system_info"
        else
            print_result 1 "System command (uname) failed"
        fi
    fi
    
    # Test command with output / –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º
    echo "üìä Testing commands with output..."
    if command -v whoami &> /dev/null; then
        current_user=$(whoami 2>/dev/null)
        if [ ! -z "$current_user" ]; then
            print_result 0 "Command with output works: $current_user"
        else
            print_result 1 "Command with output failed"
        fi
    fi
    
    # Test command with arguments / –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    echo "üîß Testing commands with arguments..."
    if command -v printf &> /dev/null; then
        formatted_output=$(printf "Hello %s" "World" 2>/dev/null)
        if [ "$formatted_output" = "Hello World" ]; then
            print_result 0 "Command with arguments works"
        else
            print_result 1 "Command with arguments failed"
        fi
    fi
    
    # Test file operations / –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    echo "üìÅ Testing file operations..."
    temp_file=$(mktemp 2>/dev/null)
    if [ $? -eq 0 ]; then
        echo "test content" > "$temp_file"
        if [ -f "$temp_file" ]; then
            content=$(cat "$temp_file" 2>/dev/null)
            if [ "$content" = "test content" ]; then
                print_result 0 "File operations work"
            else
                print_result 1 "File read failed"
            fi
            rm -f "$temp_file"
        else
            print_result 1 "File creation failed"
        fi
    else
        print_result 1 "Temp file creation failed"
    fi
    
    # Test directory operations / –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
    echo "üìÇ Testing directory operations..."
    if cd "/tmp" 2>/dev/null && cd "$HOME" 2>/dev/null; then
        print_result 0 "Directory navigation works"
    else
        print_result 1 "Directory navigation failed"
    fi
}

# Function to test paths with spaces handling / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
test_paths_with_spaces_handling() {
    print_header "PATHS WITH SPACES HANDLING TEST / –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ü–£–¢–ï–ô –° –ü–†–û–ë–ï–õ–ê–ú–ò"
    
    echo "Testing paths with spaces handling..."
    
    # Test current script path / –¢–µ—Å—Ç –ø—É—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    script_path="$0"
    echo "üìÑ Script path: $script_path"
    
    if [[ "$script_path" == *" "* ]]; then
        echo "‚ö†Ô∏è  Script path contains spaces"
        
        # Test if we can still access the script / –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
        if [ -f "$script_path" ]; then
            print_result 0 "Script with spaces in path is accessible"
            
            # Test reading from script / –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
            if head -1 "$script_path" &>/dev/null; then
                print_result 0 "Can read from script with spaces in path"
            else
                print_result 1 "Cannot read from script with spaces in path"
            fi
        else
            print_result 1 "Script with spaces in path is not accessible"
        fi
    else
        print_result 0 "Script path without spaces"
    fi
    
    # Test home directory with spaces / –¢–µ—Å—Ç –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    echo "üè† Testing home directory access..."
    if [ -d "$HOME" ]; then
        print_result 0 "Home directory accessible: $HOME"
        
        # Test listing home directory / –¢–µ—Å—Ç –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if ls "$HOME" &>/dev/null; then
            print_result 0 "Can list home directory contents"
        else
            print_result 1 "Cannot list home directory contents"
        fi
    else
        print_result 1 "Home directory not accessible"
    fi
    
    # Test creating and accessing paths with spaces / –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É—Ç—è–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    echo "üîß Testing creation of paths with spaces..."
    temp_dir=$(mktemp -d 2>/dev/null)
    if [ $? -eq 0 ]; then
        test_dir="$temp_dir/Test Directory With Spaces"
        
        # Create directory with spaces / –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        if mkdir "$test_dir" 2>/dev/null; then
            print_result 0 "Created directory with spaces"
            
            # Test accessing the directory / –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if [ -d "$test_dir" ]; then
                print_result 0 "Can access directory with spaces"
                
                # Test creating file in directory with spaces / –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                test_file="$test_dir/Test File With Spaces.txt"
                if echo "test" > "$test_file" 2>/dev/null; then
                    print_result 0 "Can create file in directory with spaces"
                    
                    # Test reading from file with spaces / –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                    if [ -f "$test_file" ]; then
                        content=$(cat "$test_file" 2>/dev/null)
                        if [ "$content" = "test" ]; then
                            print_result 0 "Can read from file with spaces in path"
                        else
                            print_result 1 "Cannot read from file with spaces in path"
                        fi
                    else
                        print_result 1 "File with spaces not found"
                    fi
                else
                    print_result 1 "Cannot create file in directory with spaces"
                fi
            else
                print_result 1 "Cannot access created directory with spaces"
            fi
            
            # Cleanup / –û—á–∏—Å—Ç–∫–∞
            rm -rf "$temp_dir"
        else
            print_result 1 "Cannot create directory with spaces"
            rm -rf "$temp_dir"
        fi
    else
        print_result 1 "Cannot create temp directory for testing"
    fi
}

# Function to test advanced plugin simulation / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
test_advanced_plugin_simulation() {
    print_header "ADVANCED PLUGIN SIMULATION TEST / –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–ú–£–õ–Ø–¶–ò–ò –ü–õ–ê–ì–ò–ù–û–í"
    
    echo "üß™ Testing advanced plugin simulation..."
    
    # Simulate system monitor plugin / –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
    echo "üñ•Ô∏è System Monitor Pro"
    echo "---"
    
    # System information / –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    echo "üìä System Information"
    echo "--Computer: $(scutil --get ComputerName 2>/dev/null || echo 'Unknown')"
    echo "--User: $(whoami)"
    echo "--OS: $(sw_vers -productVersion 2>/dev/null || uname -s)"
    echo "--Arch: $(uname -m)"
    
    # Performance metrics / –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    echo "---"
    echo "üöÄ Performance"
    
    # CPU usage / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
    cpu_usage=$(ps -A -o %cpu | awk '{s+=$1} END {print s "%"}' 2>/dev/null || echo "N/A")
    echo "--CPU: $cpu_usage"
    
    # Memory usage / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    memory_info=$(vm_stat 2>/dev/null | grep "Pages active" | awk '{print $3}' | tr -d '.' || echo "N/A")
    if [ "$memory_info" != "N/A" ]; then
        memory_mb=$((memory_info * 4096 / 1024 / 1024))
        echo "--Memory: ${memory_mb} MB active"
    else
        echo "--Memory: $memory_info"
    fi
    
    # Disk usage / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    disk_usage=$(df -h / | awk 'NR==2 {print $5}' 2>/dev/null || echo "N/A")
    echo "--Disk: $disk_usage used"
    
    # Network information / –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
    echo "---"
    echo "üåê Network"
    local_ip=$(ipconfig getifaddr en0 2>/dev/null || echo "Not connected")
    echo "--Local IP: $local_ip"
    
    # Actions section / –†–∞–∑–¥–µ–ª –¥–µ–π—Å—Ç–≤–∏–π
    echo "---"
    echo "‚ö° Actions"
    echo "--Refresh All Data | refresh=true"
    echo "--Open Activity Monitor | shell=open -a 'Activity Monitor'"
    echo "--Open System Preferences | href=x-apple.systempreferences:"
    echo "--"
    echo "--Quick Commands"
    echo "---Show Processes | shell=\"ps aux | head -20\""
    echo "---Disk Space | shell=\"df -h\""
    echo "---Memory Usage | shell=\"vm_stat\""
    
    # Settings section / –†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
    echo "---"
    echo "‚öôÔ∏è Settings"
    echo "--Auto-refresh: Enabled"
    echo "--Update Interval: 30s"
    echo "--Notifications: Enabled"
    
    print_result 0 "Advanced plugin simulation completed"
}

# Function to test error handling and edge cases / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤
test_error_handling_and_edge_cases() {
    print_header "ERROR HANDLING AND EDGE CASES TEST / –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –ò –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í"
    
    echo "üö® Testing error handling and edge cases..."
    
    # Test non-existent commands / –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
    echo "üîç Testing non-existent commands..."
    if ! command -v "this_command_does_not_exist_12345" &> /dev/null; then
        print_result 0 "Non-existent command properly detected"
    else
        print_result 1 "Non-existent command not detected"
    fi
    
    # Test non-existent files / –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    echo "üìÅ Testing non-existent files..."
    if [ ! -f "/path/that/does/not/exist/file.txt" ]; then
        print_result 0 "Non-existent file properly detected"
    else
        print_result 1 "Non-existent file not detected"
    fi
    
    # Test permission denied scenarios / –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ
    echo "üîê Testing permission scenarios..."
    if [ ! -w "/System" ] 2>/dev/null; then
        print_result 0 "Write protection properly detected"
    else
        print_result 1 "Write protection not detected"
    fi
    
    # Test empty commands / –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
    echo "‚ö™ Testing empty commands..."
    empty_result=$(echo "" 2>/dev/null)
    if [ -z "$empty_result" ]; then
        print_result 0 "Empty command handled correctly"
    else
        print_result 1 "Empty command not handled correctly"
    fi
    
    # Test commands with special characters / –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞
    echo "üî£ Testing special characters..."
    special_chars_result=$(echo "Line with | pipe & ampersand > greater < less" 2>/dev/null)
    if [ ! -z "$special_chars_result" ]; then
        print_result 0 "Special characters handled"
    else
        print_result 1 "Special characters caused issues"
    fi
    
    # Test very long lines / –¢–µ—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    echo "üìè Testing long lines..."
    long_line="This is a very long line that should test the handling of extended menu item titles and descriptions in CronBarX to ensure proper rendering and functionality without breaking the menu structure or causing layout issues."
    if [ ${#long_line} -gt 100 ]; then
        print_result 0 "Long line handling: ${#long_line} characters"
    else
        print_result 1 "Long line test failed"
    fi
    
    # Test Unicode and emoji characters / –¢–µ—Å—Ç Unicode –∏ —ç–º–æ–¥–∑–∏
    echo "üåç Testing Unicode and emoji..."
    unicode_line="Unicode: ‰∏≠Êñá —Ä—É—Å—Å–∫–∏–π Espa√±ol üá∫üá∏ üá∑üá∫ üá™üá∫ üöÄ ‚úÖ ‚ùå ‚ö†Ô∏è üîÑ"
    if [[ "$unicode_line" == *"üöÄ"* ]]; then
        print_result 0 "Unicode and emoji characters supported"
    else
        print_result 1 "Unicode and emoji characters not supported"
    fi
}

# Function to test refresh functionality / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
test_refresh_functionality() {
    print_header "REFRESH FUNCTIONALITY TEST / –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø"
    
    echo "üîÑ Testing refresh functionality..."
    
    # Test timestamp to verify refresh / –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    current_time=$(date +%H:%M:%S)
    echo "‚è∞ Current Time: $current_time"
    
    # Refresh test items / –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "---"
    echo "üîÑ Refresh Tests"
    echo "--Refresh Now | refresh=true"
    echo "--Refresh with Command | shell=\"echo 'Refreshing...'\" refresh=true"
    echo "--Refresh with Delay | shell=\"sleep 1 && echo 'Delayed refresh'\" refresh=true"
    
    # Dynamic content that changes / –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç—Å—è
    echo "---"
    echo "üìä Dynamic Content"
    echo "--Random Number: $RANDOM"
    echo "--Process Count: $(ps aux | wc -l | tr -d ' ')"
    echo "--Uptime: $(uptime | awk '{print $3}' | tr -d ',')"
    
    print_result 0 "Refresh functionality test completed"
}

# Function to test complex nested structures / –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
test_complex_nested_structures() {
    print_header "COMPLEX NESTED STRUCTURES TEST / –¢–ï–°–¢ –°–õ–û–ñ–ù–´–• –í–õ–û–ñ–ï–ù–ù–´–• –°–¢–†–£–ö–¢–£–†"
    
    echo "üèóÔ∏è Testing complex nested structures..."
    
    # Multi-level nested menu with mixed content / –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    echo "üéõÔ∏è Control Panel"
    echo "---"
    
    # Level 1: System / –£—Ä–æ–≤–µ–Ω—å 1: –°–∏—Å—Ç–µ–º–∞
    echo "üñ•Ô∏è System"
    echo "--Hardware"
    echo "---Processor | shell=\"sysctl -n machdep.cpu.brand_string\""
    echo "---Memory | shell=\"sysctl -n hw.memsize\" | terminal=true"
    echo "---Disks | shell=\"diskutil list\""
    echo "--Software"
    echo "---OS Version | shell=\"sw_vers -productVersion\""
    echo "---Build Number | shell=\"sw_vers -buildVersion\""
    echo "---Kernel | shell=\"uname -r\""
    
    # Level 1: Network / –£—Ä–æ–≤–µ–Ω—å 1: –°–µ—Ç—å
    echo "---"
    echo "üåê Network"
    echo "--Connections"
    echo "---Wi-Fi | shell=\"networksetup -getairportnetwork en0\""
    echo "---Ethernet | shell=\"ifconfig en0\""
    echo "---All Interfaces | shell=\"ifconfig -a\" | terminal=true"
    echo "--Tools"
    echo "---Ping Test | shell=\"ping -c 3 8.8.8.8\""
    echo "---DNS Check | shell=\"nslookup google.com\""
    echo "---Port Scan | shell=\"nc -zv localhost 80\""
    
    # Level 1: User / –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    echo "---"
    echo "üë§ User"
    echo "--Account"
    echo "---Username | shell=\"whoami\""
    echo "---Home Directory | shell=\"echo $HOME\""
    echo "---Shell | shell=\"echo $SHELL\""
    echo "--Preferences"
    echo "---Open User Prefs | href=x-apple.systempreferences:com.apple.preferences.users"
    echo "---Login Items | shell=\"osascript -e 'tell application \\\"System Events\\\" to get the name of every login item'\""
    
    # Level 1: Applications / –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    echo "---"
    echo "üì± Applications"
    echo "--Productivity"
    echo "---Mail | shell=open -a Mail"
    echo "---Calendar | shell=open -a Calendar"
    echo "---Notes | shell=open -a Notes"
    echo "--Development"
    echo "---Terminal | shell=open -a Terminal"
    echo "---Xcode | shell=open -a Xcode"
    echo "---VS Code | shell=open -a 'Visual Studio Code'"
    echo "--Creative"
    echo "---Photos | shell=open -a Photos"
    echo "---Music | shell=open -a Music"
    echo "---TV | shell=open -a TV"
    
    print_result 0 "Complex nested structures test completed"
}

# Function to run comprehensive test suite / –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
run_comprehensive_test_suite() {
    print_header "CRONBARX COMPREHENSIVE TEST SUITE / –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ù–ê–ë–û–† –¢–ï–°–¢–û–í CRONBARX"
    echo "Timestamp: $(date)"
    echo "Script: $0"
    echo "User: $(whoami)"
    echo "System: $(uname -s) $(uname -m)"
    echo "---"
    
    test_basic_functionality
    test_complete_menu_structure
    test_command_execution_types
    test_paths_with_spaces_handling
    test_advanced_plugin_simulation
    test_error_handling_and_edge_cases
    test_refresh_functionality
    test_complex_nested_structures
    
    # Final summary / –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print_header "COMPREHENSIVE TEST SUMMARY / –°–í–û–î–ö–ê –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "‚úÖ Tests Passed: $TESTS_PASSED"
    echo "‚ùå Tests Failed: $TESTS_FAILED"
    echo "üìä Total Tests: $((TESTS_PASSED + TESTS_FAILED))"
    echo "üéØ Success Rate: $((TESTS_PASSED * 100 / (TESTS_PASSED + TESTS_FAILED)))%"
    
    if [ $TESTS_FAILED -eq 0 ]; then
        echo "üéâ ALL TESTS PASSED! CronBarX is fully functional."
        echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! CronBarX –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω."
        echo "üöÄ Ready for production use!"
        echo "üöÄ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production!"
    else
        echo "‚ö†Ô∏è  Some tests failed. Check the specific issues above."
        echo "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ."
        echo "üîß Review failed tests and fix the issues."
        echo "üîß –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã."
    fi
    
    echo "---"
    echo "üìã Test Coverage:"
    echo "- Basic script execution and output formatting"
    echo "- Complete menu structure with all formats"
    echo "- Command execution with various types and parameters"
    echo "- Paths with spaces handling"
    echo "- Advanced plugin simulation"
    echo "- Error handling and edge cases"
    echo "- Refresh functionality"
    echo "- Complex nested menu structures"
    echo "- Unicode, emoji, and special characters"
    echo "- File and directory operations"
}

# Function to show interactive test menu / –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
show_interactive_test_menu() {
    echo "üîÑ CronBarX Comprehensive Test Suite"
    echo "---"
    echo "üìä Run Complete Test Suite | shell=\"$0\" param1=\"--comprehensive\" refresh=true"
    echo "üîß Individual Test Categories"
    echo "--Basic Functionality | shell=\"$0\" param1=\"--basic\" refresh=true"
    echo "--Menu Structure | shell=\"$0\" param1=\"--menu\" refresh=true"
    echo "--Command Execution | shell=\"$0\" param1=\"--commands\" refresh=true"
    echo "--Paths with Spaces | shell=\"$0\" param1=\"--paths\" refresh=true"
    echo "--Plugin Simulation | shell=\"$0\" param1=\"--plugin\" refresh=true"
    echo "--Error Handling | shell=\"$0\" param1=\"--errors\" refresh=true"
    echo "--Refresh Functionality | shell=\"$0\" param1=\"--refresh\" refresh=true"
    echo "--Nested Structures | shell=\"$0\" param1=\"--nested\" refresh=true"
    echo "---"
    echo "üìà Test Results"
    echo "--Passed: $TESTS_PASSED"
    echo "--Failed: $TESTS_FAILED"
    echo "--Total: $((TESTS_PASSED + TESTS_FAILED))"
    echo "---"
    echo "‚ùå Exit Test Suite | refresh=true"
}

# Main execution / –û—Å–Ω–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
case "${1}" in
    "--comprehensive")
        run_comprehensive_test_suite
        ;;
    "--basic")
        test_basic_functionality
        ;;
    "--menu")
        test_complete_menu_structure
        ;;
    "--commands")
        test_command_execution_types
        ;;
    "--paths")
        test_paths_with_spaces_handling
        ;;
    "--plugin")
        test_advanced_plugin_simulation
        ;;
    "--errors")
        test_error_handling_and_edge_cases
        ;;
    "--refresh")
        test_refresh_functionality
        ;;
    "--nested")
        test_complex_nested_structures
        ;;
    *)
        show_interactive_test_menu
        ;;
esac